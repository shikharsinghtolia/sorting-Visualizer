{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shikhar\\\\Desktop\\\\Projects\\\\sortingvisualizer\\\\src\\\\visualizer.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './SortingVisualizer.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SortingVisualizer = () => {\n  _s();\n  const [array, setArray] = useState([]);\n  const [isSorting, setIsSorting] = useState(false);\n  useEffect(() => {\n    resetArray();\n  }, []);\n  const resetArray = () => {\n    if (isSorting) return; // Prevent resetting while sorting\n    const newArray = [];\n    for (let i = 0; i < 100; i++) {\n      newArray.push(Math.floor(Math.random() * 500) + 5);\n    }\n    setArray(newArray);\n  };\n  const playSound = frequency => {\n    const context = new (window.AudioContext || window.webkitAudioContext)();\n    const oscillator = context.createOscillator();\n    oscillator.type = 'sine';\n    oscillator.frequency.setValueAtTime(frequency, context.currentTime);\n    oscillator.connect(context.destination);\n    oscillator.start();\n    oscillator.stop(context.currentTime + 0.05); // Play for 50ms\n  };\n  const bubbleSort = () => {\n    if (isSorting) return; // Prevent starting a new sort while another is ongoing\n    setIsSorting(true);\n    const animations = [];\n    const auxiliaryArray = array.slice();\n    for (let i = 0; i < auxiliaryArray.length; i++) {\n      for (let j = 0; j < auxiliaryArray.length - i - 1; j++) {\n        if (auxiliaryArray[j] > auxiliaryArray[j + 1]) {\n          [auxiliaryArray[j], auxiliaryArray[j + 1]] = [auxiliaryArray[j + 1], auxiliaryArray[j]];\n          animations.push([j, j + 1]);\n        }\n      }\n    }\n    animateBubbleSort(animations);\n  };\n  const animateBubbleSort = animations => {\n    for (let i = 0; i < animations.length; i++) {\n      setTimeout(() => {\n        if (isSorting) {\n          const [barOneIdx, barTwoIdx] = animations[i];\n          playSound(array[barOneIdx] * 2); // Adjust frequency based on array value\n          setArray(prevArray => {\n            const newArray = prevArray.slice();\n            [newArray[barOneIdx], newArray[barTwoIdx]] = [newArray[barTwoIdx], newArray[barOneIdx]];\n            return newArray;\n          });\n        }\n        if (i === animations.length - 1) setIsSorting(false);\n      }, i * 10);\n    }\n  };\n\n  // ... Merge, Quick, and Insertion sort implementations are the same,\n  // just add the playSound function call to animateMergeSort, animateQuickSort, animateInsertionSort.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sorting-visualizer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetArray,\n        disabled: isSorting,\n        children: \"Generate New Array\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: bubbleSort,\n        disabled: isSorting,\n        children: \"Bubble Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: mergeSort,\n        disabled: isSorting,\n        children: \"Merge Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: quickSort,\n        disabled: isSorting,\n        children: \"Quick Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: insertionSort,\n        disabled: isSorting,\n        children: \"Insertion Sort\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsSorting(false),\n        children: \"Stop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"array-container\",\n      children: array.map((value, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"array-bar\",\n        style: {\n          height: `${value}px`\n        }\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n_s(SortingVisualizer, \"FOUWv6sHxTrOZeLSxU9QsJ6PEvY=\");\n_c = SortingVisualizer;\nexport default SortingVisualizer;\nvar _c;\n$RefreshReg$(_c, \"SortingVisualizer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SortingVisualizer","_s","array","setArray","isSorting","setIsSorting","resetArray","newArray","i","push","Math","floor","random","playSound","frequency","context","window","AudioContext","webkitAudioContext","oscillator","createOscillator","type","setValueAtTime","currentTime","connect","destination","start","stop","bubbleSort","animations","auxiliaryArray","slice","length","j","animateBubbleSort","setTimeout","barOneIdx","barTwoIdx","prevArray","className","children","onClick","disabled","fileName","_jsxFileName","lineNumber","columnNumber","mergeSort","quickSort","insertionSort","map","value","idx","style","height","_c","$RefreshReg$"],"sources":["C:/Users/shikhar/Desktop/Projects/sortingvisualizer/src/visualizer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './SortingVisualizer.css';\r\n\r\nconst SortingVisualizer = () => {\r\n    const [array, setArray] = useState([]);\r\n    const [isSorting, setIsSorting] = useState(false);\r\n\r\n    useEffect(() => {\r\n        resetArray();\r\n    }, []);\r\n\r\n    const resetArray = () => {\r\n        if (isSorting) return; // Prevent resetting while sorting\r\n        const newArray = [];\r\n        for (let i = 0; i < 100; i++) {\r\n            newArray.push(Math.floor(Math.random() * 500) + 5);\r\n        }\r\n        setArray(newArray);\r\n    };\r\n\r\n    const playSound = (frequency) => {\r\n        const context = new (window.AudioContext || window.webkitAudioContext)();\r\n        const oscillator = context.createOscillator();\r\n        oscillator.type = 'sine';\r\n        oscillator.frequency.setValueAtTime(frequency, context.currentTime);\r\n        oscillator.connect(context.destination);\r\n        oscillator.start();\r\n        oscillator.stop(context.currentTime + 0.05); // Play for 50ms\r\n    };\r\n\r\n    const bubbleSort = () => {\r\n        if (isSorting) return; // Prevent starting a new sort while another is ongoing\r\n        setIsSorting(true);\r\n        const animations = [];\r\n        const auxiliaryArray = array.slice();\r\n        for (let i = 0; i < auxiliaryArray.length; i++) {\r\n            for (let j = 0; j < auxiliaryArray.length - i - 1; j++) {\r\n                if (auxiliaryArray[j] > auxiliaryArray[j + 1]) {\r\n                    [auxiliaryArray[j], auxiliaryArray[j + 1]] = [auxiliaryArray[j + 1], auxiliaryArray[j]];\r\n                    animations.push([j, j + 1]);\r\n                }\r\n            }\r\n        }\r\n        animateBubbleSort(animations);\r\n    };\r\n\r\n    const animateBubbleSort = (animations) => {\r\n        for (let i = 0; i < animations.length; i++) {\r\n            setTimeout(() => {\r\n                if (isSorting) {\r\n                    const [barOneIdx, barTwoIdx] = animations[i];\r\n                    playSound(array[barOneIdx] * 2); // Adjust frequency based on array value\r\n                    setArray(prevArray => {\r\n                        const newArray = prevArray.slice();\r\n                        [newArray[barOneIdx], newArray[barTwoIdx]] = [newArray[barTwoIdx], newArray[barOneIdx]];\r\n                        return newArray;\r\n                    });\r\n                }\r\n                if (i === animations.length - 1) setIsSorting(false);\r\n            }, i * 10);\r\n        }\r\n    };\r\n\r\n    // ... Merge, Quick, and Insertion sort implementations are the same,\r\n    // just add the playSound function call to animateMergeSort, animateQuickSort, animateInsertionSort.\r\n\r\n    return (\r\n        <div className=\"sorting-visualizer\">\r\n            <div className=\"controls\">\r\n                <button onClick={resetArray} disabled={isSorting}>Generate New Array</button>\r\n                <button onClick={bubbleSort} disabled={isSorting}>Bubble Sort</button>\r\n                <button onClick={mergeSort} disabled={isSorting}>Merge Sort</button>\r\n                <button onClick={quickSort} disabled={isSorting}>Quick Sort</button>\r\n                <button onClick={insertionSort} disabled={isSorting}>Insertion Sort</button>\r\n                <button onClick={() => setIsSorting(false)}>Stop</button>\r\n            </div>\r\n            <div className=\"array-container\">\r\n                {array.map((value, idx) => (\r\n                    <div \r\n                        className=\"array-bar\" \r\n                        key={idx} \r\n                        style={{ height: `${value}px` }}\r\n                    ></div>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default SortingVisualizer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}